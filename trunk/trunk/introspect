"commands" : [
         {
            "command" : "JSONRPC.Introspect",
            "description" : "Enumerates all actions and descriptions. Parameter example {\"getdescriptions\": true, \"getpermissions\": true, \"filterbytransport\": true }. All parameters optional",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "JSONRPC.Version",
            "description" : "Retrieve the jsonrpc protocol version",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "JSONRPC.Permission",
            "description" : "Retrieve the clients permissions",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "JSONRPC.Ping",
            "description" : "Ping responder",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "JSONRPC.Announce",
            "description" : "Announce to other connected clients. Parameter example {\"sender\": \"foo\", \"message\": \"bar\", \"data\": \"somedata\" }. data is optional",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "Player.GetActivePlayers",
            "description" : "Returns all active players IDs",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "AudioPlayer.PlayPause",
            "description" : "Pauses or unpause playback",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlayer.Stop",
            "description" : "Stops playback",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlayer.SkipPrevious",
            "description" : "Skips to previous item on the playlist",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlayer.SkipNext",
            "description" : "Skips to next item on the playlist",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlayer.BigSkipBackward",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlayer.BigSkipForward",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlayer.SmallSkipBackward",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlayer.SmallSkipForward",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlayer.Rewind",
            "description" : "Rewind current playback",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlayer.Forward",
            "description" : "Forward current playback",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlayer.GetTime",
            "description" : "Retrieve time",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "AudioPlayer.GetTimeMS",
            "description" : "Retrieve time in MS",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "AudioPlayer.GetPercentage",
            "description" : "Retrieve percentage",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "AudioPlayer.SeekTime",
            "description" : "Seek to a specific time. Parameter integer in MS",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlayer.Record",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlayer.PlayPause",
            "description" : "Pauses or unpause playback",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlayer.Stop",
            "description" : "Stops playback",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlayer.SkipPrevious",
            "description" : "Skips to previous item on the playlist",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlayer.SkipNext",
            "description" : "Skips to next item on the playlist",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlayer.BigSkipBackward",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlayer.BigSkipForward",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlayer.SmallSkipBackward",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlayer.SmallSkipForward",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlayer.Rewind",
            "description" : "Rewind current playback",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlayer.Forward",
            "description" : "Forward current playback",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlayer.GetTime",
            "description" : "Retrieve time",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoPlayer.GetTimeMS",
            "description" : "Retrieve time in MS",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoPlayer.GetPercentage",
            "description" : "Retrieve percentage",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoPlayer.SeekTime",
            "description" : "Seek to a specific time. Parameter integer in MS",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "PicturePlayer.PlayPause",
            "description" : "Pauses or unpause slideshow",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "PicturePlayer.Stop",
            "description" : "Stops slideshow",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "PicturePlayer.SkipPrevious",
            "description" : "Skips to previous picture in the slideshow",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "PicturePlayer.SkipNext",
            "description" : "Skips to next picture in the slideshow",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "PicturePlayer.MoveLeft",
            "description" : "If picture is zoomed move viewport left otherwise skip previous",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "PicturePlayer.MoveRight",
            "description" : "If picture is zoomed move viewport right otherwise skip previous",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "PicturePlayer.MoveDown",
            "description" : "If picture is zoomed move viewport down",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "PicturePlayer.MoveUp",
            "description" : "If picture is zoomed move viewport up",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "PicturePlayer.ZoomOut",
            "description" : "Zoom out once",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "PicturePlayer.ZoomIn",
            "description" : "Zoom in once",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "PicturePlayer.Zoom",
            "description" : "Zooms current picture. Parameter integer of zoom level",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "PicturePlayer.Rotate",
            "description" : "Rotates current picture",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlaylist.Play",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlaylist.SkipPrevious",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlaylist.SkipNext",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlaylist.GetItems",
            "description" : "",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoPlaylist.Add",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlaylist.Clear",
            "description" : "Clear video playlist",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlaylist.Shuffle",
            "description" : "Shuffle video playlist",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "VideoPlaylist.UnShuffle",
            "description" : "Shuffle video playlist",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlaylist.Play",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlaylist.SkipPrevious",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlaylist.SkipNext",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlaylist.GetItems",
            "description" : "",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "AudioPlaylist.Add",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlaylist.Clear",
            "description" : "Clear audio playlist",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlaylist.Shuffle",
            "description" : "Shuffle audio playlist",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "AudioPlaylist.UnShuffle",
            "description" : "Shuffle audio playlist",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "Playlist.Create",
            "description" : "Creates a virtual playlist from a given one from a file",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "Playlist.Destroy",
            "description" : "Destroys a virtual playlist",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "Playlist.GetItems",
            "description" : "Retrieve items in the playlist. Parameter example {\"playlist\": \"music\" }. playlist optional.",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "Playlist.Add",
            "description" : "Add items to the playlist. Parameter example {\"playlist\": \"music\", \"file\": \"/foo/bar.mp3\" }. playlist optional.",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "Playlist.Remove",
            "description" : "Remove items in the playlist. Parameter example {\"playlist\": \"music\", \"item\": 0 }. playlist optional.",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "Playlist.Swap",
            "description" : "Swap items in the playlist. Parameter example {\"playlist\": \"music\", \"item1\": 0, \"item2\": 1 }. playlist optional.",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "Playlist.Shuffle",
            "description" : "Shuffle playlist",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "Files.GetSources",
            "description" : "Get the root directory of the media windows",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "Files.Download",
            "description" : "Specify a file to download to get info about how to download it, i.e a proper URL",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "Files.GetDirectory",
            "description" : "Retrieve the specified directory",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "MusicLibrary.GetArtists",
            "description" : "Retrieve all artists",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "MusicLibrary.GetAlbums",
            "description" : "Retrieve all albums from specified artist or genre",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "MusicLibrary.GetSongs",
            "description" : "Retrieve all songs from specified album, artist or genre",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "MusicLibrary.ScanForContent",
            "description" : "",
            "executable" : true,
            "permission" : "ScanLibrary"
         },
         {
            "command" : "VideoLibrary.GetMovies",
            "description" : "Retrieve all movies. Parameter example { \"fields\": [\"plot\"], \"sortmethod\": \"title\", \"sortorder\": \"ascending\", \"start\": 0, \"end\": 3}. fields, sortorder, sortmethod, start and end are optional",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoLibrary.GetTVShows",
            "description" : "Parameter example { \"fields\": [\"plot\"], \"sortmethod\": \"label\", \"sortorder\": \"ascending\", \"start\": 0, \"end\": 3}. sortorder, sortmethod, start and end are optional",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoLibrary.GetSeasons",
            "description" : "Parameter example { \"tvshowid\": 0, \"fields\": [\"season\"], \"sortmethod\": \"label\", \"sortorder\": \"ascending\", \"start\": 0, \"end\": 3}. sortorder, sortmethod, start and end are optional",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoLibrary.GetEpisodes",
            "description" : "Parameter example { \"tvshowid\": 0, \"season\": 1, \"fields\": [\"plot\"], \"sortmethod\": \"episode\", \"sortorder\": \"ascending\", \"start\": 0, \"end\": 3}. sortorder, sortmethod, start and end are optional",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoLibrary.GetMusicVideoAlbums",
            "description" : "",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoLibrary.GetMusicVideos",
            "description" : "Parameter example { \"artistid\": 0, \"albumid\": 0, \"fields\": [\"plot\"], \"sortmethod\": \"artistignorethe\", \"sortorder\": \"ascending\", \"start\": 0, \"end\": 3}. sortorder, sortmethod, start and end are optional",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoLibrary.GetRecentlyAddedMovies",
            "description" : "Retrieve all recently added movies. Parameter example { \"fields\": [\"plot\"], \"sortmethod\": \"title\", \"sortorder\": \"ascending\", \"start\": 0, \"end\": 3}. fields, sortorder, sortmethod, start and end are optional",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoLibrary.GetRecentlyAddedEpisodes",
            "description" : "Retrieve all recently added episodes. Parameter example { \"fields\": [\"plot\"], \"sortmethod\": \"title\", \"sortorder\": \"ascending\", \"start\": 0, \"end\": 3}. fields, sortorder, sortmethod, start and end are optional",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoLibrary.GetRecentlyAddedMusicVideos",
            "description" : "Retrieve all recently added music videos. Parameter example { \"fields\": [\"plot\"], \"sortmethod\": \"title\", \"sortorder\": \"ascending\", \"start\": 0, \"end\": 3}. fields, sortorder, sortmethod, start and end are optional",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "VideoLibrary.ScanForContent",
            "description" : "",
            "executable" : true,
            "permission" : "ScanLibrary"
         },
         {
            "command" : "System.Shutdown",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPower"
         },
         {
            "command" : "System.Suspend",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPower"
         },
         {
            "command" : "System.Hibernate",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPower"
         },
         {
            "command" : "System.Reboot",
            "description" : "",
            "executable" : true,
            "permission" : "ControlPower"
         },
         {
            "command" : "System.GetInfo",
            "description" : "Retrieve info about the system",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "XBMC.GetVolume",
            "description" : "Retrieve the current volume",
            "executable" : true,
            "permission" : "ReadData"
         },
         {
            "command" : "XBMC.SetVolume",
            "description" : "Set volume. Parameter integer between 0 amd 100",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "XBMC.ToggleMute",
            "description" : "Toggle mute",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "XBMC.Play",
            "description" : "Starts playback",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "XBMC.StartSlideshow",
            "description" : "Starts slideshow. Parameter example {\"directory\": \"/foo/\", \"random\": true, \"recursive\": true} or just string to recursively and random run directory",
            "executable" : true,
            "permission" : "ControlPlayback"
         },
         {
            "command" : "XBMC.Log",
            "description" : "Logs a line in the xbmc.log. Parameter example {\"message\": \"foo\", \"level\": \"info\"} or just a string to log message with level debug",
            "executable" : true,
            "permission" : "Logging"
         },
         {
            "command" : "XBMC.Quit",
            "description" : "Quit xbmc",
            "executable" : true,
            "permission" : "ControlPower"
         }
      ]
